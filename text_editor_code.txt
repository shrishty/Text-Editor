(require 2htdp/image)
(require 2htdp/universe)

;; editor-project-starter.rkt
;;
;; In this project you will design a simple one line text editor.  
;;
;; The screen looks like:
;; 
;;     abc|def
;;
;; where | is the cursor.
;;
;; Typing a character inserts that character before the cursor.
;; The backspace key deletes the character before the cursor.
;; The left and right arrow keys move the cursor left and right.



;; =================================================================================
;; Constants:

(define WIDTH  200)
(define HEIGHT  20)

(define TEXT-SIZE  18)
(define TEXT-COLOR "magenta")

(define CURSOR (rectangle 1 20 "solid" "red"))

(define MTS (empty-scene WIDTH HEIGHT))



;; =================================================================================
;; Data Definitions:

(define-struct editor (txt cp))
;; Editor is (make-editor String Natural)
;; interp. the current text (txt) and cursor position (cp) using a 0-based index

(define ED1 (make-editor ""       0)) ; empty
(define ED2 (make-editor "abcdef" 0)) ; cursor at beginning as in |abcdef
(define ED3 (make-editor "abcdef" 3)) ; cursor in middle of text as in abc|def
(define ED4 (make-editor "abcdef" 6)) ; cursor at end as in abcdef|

#;
(define (fn-for-editor e)
  (... (editor-txt e)
       (editor-cp e)))

;; =================================================================================
;; Functions:

;; Editor -> Editor
;; start the world with an initial state e, for example (main (make-editor "" 0))
(define (main e)
  (big-bang e
            (to-draw    render)                   ; Editor -> Image
            (on-key     handle-key)               ; Editor KeyEvent -> Editor
            ))            


;; Editor -> Image
;; place text with cursor at left, middle edge of MTS
(check-expect (render (make-editor "abcdef" 3))
              (overlay/align "left"
                             "middle"
                             (beside (text "abc" TEXT-SIZE TEXT-COLOR)
                                     CURSOR
                                     (text "def" TEXT-SIZE TEXT-COLOR))
                             MTS))

;(define (render e) MTS) ;stub

(define (render e) 
  (overlay/align "left" "middle" (beside 
                                  (text (substring (editor-txt e)            0                   (editor-cp e)) TEXT-SIZE TEXT-COLOR)
                                  CURSOR
                                  (text (substring (editor-txt e) (editor-cp e) (string-length (editor-txt e))) TEXT-SIZE TEXT-COLOR))
                 MTS))

;; Editor -> Editor
;; Move the cursor towards left by one letter (when cursor is in left most position no change)

(check-expect (move-left ED2) (make-editor "abcdef" 0))
(check-expect (move-left ED3) (make-editor "abcdef" 2))

;(define (move-left e) e) ;stub

(define (move-left e)
  (if (= (editor-cp e) 0) 
      e
      (make-editor (editor-txt e) (- (editor-cp e) 1))))

;; Editor -> Editor
;; Move the cursor to right by a letter (when cursor is in right-most position no change)

(check-expect (move-right ED4) (make-editor "abcdef" 6))
(check-expect (move-right ED2) (make-editor "abcdef" 1))

;(define (move-right e) e) ;stub

(define (move-right e)
  (if (= (editor-cp e) (string-length (editor-txt e))) 
      e
      (make-editor (editor-txt e) (+ (editor-cp e) 1))))

;; Editor -> Editor
;; Delete the letter just before cursor and move the cursor also

(check-expect (delete ED1) (make-editor "" 0))
(check-expect (delete ED2) (make-editor "abcdef" 0))
(check-expect (delete ED3) (make-editor "abdef" 2))

;(define (delete e) e) ;stub

(define (delete e)
  (if (= (editor-cp e) 0) 
      e
      (make-editor (string-append 
                    (substring (editor-txt e)            0            (- (editor-cp e) 1))
                    (substring (editor-txt e) (editor-cp e) (string-length (editor-txt e))))
                    (- (editor-cp e) 1))))

;; Editor -> Editor
;; add the given letter in editor after the cursor

(check-expect (insert ED1 "l") (make-editor "l" 1))
(check-expect (insert ED2 "p") (make-editor (string-append "p" (editor-txt ED2)) 1))
(check-expect (insert ED3 "p") (make-editor "abcpdef" 4))
(check-expect (insert ED4 "l") (make-editor "abcdefl" 7))

;(define (insert e p) e) ;stub

(define (insert e p) 
  (cond [(= (editor-cp e) (string-length (editor-txt e)))
         (make-editor (string-append (editor-txt e) p) (+ (editor-cp e) 1))]
        [(= (editor-cp e) 0)
         (make-editor (string-append p (editor-txt e)) (+ (editor-cp e) 1))]
        [else
         (make-editor (string-append
                       (substring (editor-txt e)            0                  (editor-cp e))
                       p 
                       (substring (editor-txt e) (editor-cp e) (string-length (editor-txt e))))
                      (+ (editor-cp e) 1))]))
      


;; Editor KeyEvent -> Editor
;; call appropriate function for each keyboard command

(check-expect (handle-key ED1 "left") (make-editor (editor-txt ED1) 0))                     ; on left key
(check-expect (handle-key ED2 "left") (make-editor (editor-txt ED2) 0))
(check-expect (handle-key ED3 "left") (make-editor (editor-txt ED3) (- (editor-cp ED3) 1)))          
(check-expect (handle-key ED4 "left") (make-editor (editor-txt ED4) (- (editor-cp ED4) 1)))

(check-expect (handle-key ED1 "right") (make-editor (editor-txt ED1) 0))                     ; on right key 
(check-expect (handle-key ED2 "right") (make-editor (editor-txt ED2) 1))
(check-expect (handle-key ED3 "right") (make-editor (editor-txt ED3) (+ (editor-cp ED3) 1)))          
(check-expect (handle-key ED4 "right") (make-editor (editor-txt ED4)       (editor-cp ED4)))

(check-expect (handle-key ED1 "\b") (make-editor (editor-txt ED1) 0))                        ; on delete
(check-expect (handle-key ED2 "\b") (make-editor (editor-txt ED2) 0))
(check-expect (handle-key ED3 "\b") (make-editor (string-append 
                                                  (substring (editor-txt ED3)              0            (- (editor-cp ED3) 1)) 
                                                  (substring (editor-txt ED3) (editor-cp ED3) (string-length (editor-txt ED3))))
                                                 (- (editor-cp ED3) 1)))

(check-expect (handle-key ED1 "a") (make-editor (string-append (editor-txt ED1)               "a") (+ (editor-cp ED1) 1)))             ;on insert
(check-expect (handle-key ED2 "a") (make-editor (string-append  "a"              (editor-txt ED2)) (+ (editor-cp ED2) 1)))
(check-expect (handle-key ED3 "a") (make-editor (string-append (substring (editor-txt ED3)              0                  (editor-cp ED3)) 
                                                               "a"
                                                               (substring (editor-txt ED3) (editor-cp ED3) (string-length (editor-txt ED3))))
                                                (+ (editor-cp ED3) 1)))

(check-expect (handle-key ED3 "up") ED3)        ; for any other key





;(define (handle-key e key) e) ;stub

(define (handle-key e key)
  (cond [(key=? key "left")        (move-left  e)]
        [(key=? key "right")       (move-right e)]
        [(key=? key "\b")          (delete  e)]        
        [(= (string-length key) 1) (insert e key)]
        ;[(key=? key "escape")                (exit)]
        [else e]))

; Note: 
; "left" is the left arrow key, "right" is the right arrow key, and 
; "\b" is the backspace key.


(main (make-editor "" 0))

